// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: mints.sql

package db

import (
	"context"
)

const getFlawedMintsForBlock = `-- name: GetFlawedMintsForBlock :many
SELECT block_num, collection_address, token_id, token_url, token_name, image_url, image_data FROM mints WHERE block_num = $1 AND image_url IS NULL
`

func (q *Queries) GetFlawedMintsForBlock(ctx context.Context, blockNum int32) ([]Mint, error) {
	rows, err := q.db.QueryContext(ctx, getFlawedMintsForBlock, blockNum)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Mint{}
	for rows.Next() {
		var i Mint
		if err := rows.Scan(
			&i.BlockNum,
			&i.CollectionAddress,
			&i.TokenID,
			&i.TokenUrl,
			&i.TokenName,
			&i.ImageUrl,
			&i.ImageData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHighestBlock = `-- name: GetHighestBlock :one
SELECT MAX(block_num) FROM mints
`

func (q *Queries) GetHighestBlock(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getHighestBlock)
	var max interface{}
	err := row.Scan(&max)
	return max, err
}

const getMintsForBlock = `-- name: GetMintsForBlock :many
SELECT block_num, collection_address, token_id, token_url, token_name, image_url, image_data FROM mints WHERE block_num = $1
`

func (q *Queries) GetMintsForBlock(ctx context.Context, blockNum int32) ([]Mint, error) {
	rows, err := q.db.QueryContext(ctx, getMintsForBlock, blockNum)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Mint{}
	for rows.Next() {
		var i Mint
		if err := rows.Scan(
			&i.BlockNum,
			&i.CollectionAddress,
			&i.TokenID,
			&i.TokenUrl,
			&i.TokenName,
			&i.ImageUrl,
			&i.ImageData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMintWithImageData = `-- name: InsertMintWithImageData :exec
INSERT INTO mints (block_num, collection_address, token_id, token_name, image_data)
  VALUES ($1::int, $2::varchar, $3::varchar, $4::varchar, $5::varchar)
  ON CONFLICT DO NOTHING
`

type InsertMintWithImageDataParams struct {
	BlockNum          int32  `json:"block_num"`
	CollectionAddress string `json:"collection_address"`
	TokenID           string `json:"token_id"`
	TokenName         string `json:"token_name"`
	ImageData         string `json:"image_data"`
}

func (q *Queries) InsertMintWithImageData(ctx context.Context, arg InsertMintWithImageDataParams) error {
	_, err := q.db.ExecContext(ctx, insertMintWithImageData,
		arg.BlockNum,
		arg.CollectionAddress,
		arg.TokenID,
		arg.TokenName,
		arg.ImageData,
	)
	return err
}

const insertMintWithImageURL = `-- name: InsertMintWithImageURL :exec
INSERT INTO mints (block_num, collection_address, token_id, token_url, image_url, token_name)
  VALUES ($1::int, $2::varchar, $3::varchar, $4::varchar, $5::varchar,$6::varchar)
  ON CONFLICT DO NOTHING
`

type InsertMintWithImageURLParams struct {
	BlockNum          int32  `json:"block_num"`
	CollectionAddress string `json:"collection_address"`
	TokenID           string `json:"token_id"`
	TokenUrl          string `json:"token_url"`
	ImageUrl          string `json:"image_url"`
	TokenName         string `json:"token_name"`
}

func (q *Queries) InsertMintWithImageURL(ctx context.Context, arg InsertMintWithImageURLParams) error {
	_, err := q.db.ExecContext(ctx, insertMintWithImageURL,
		arg.BlockNum,
		arg.CollectionAddress,
		arg.TokenID,
		arg.TokenUrl,
		arg.ImageUrl,
		arg.TokenName,
	)
	return err
}
